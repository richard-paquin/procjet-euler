
public class Euler12 {

    public static int CountDivisors(long n) {
        assert n > 0;
        int count = 0;
        long s = (long) Math.sqrt(n);
        for (int i = 1; i <= s; i++) {
            if (n % i == 0) {
                count += 2;
            }
        }
        if (s * s == n) {
            System.out.println("square " + s * s + " " + n);
            count -= 1;
        }
        return count;
    }

    public static void exec() {
        /*
        The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
        Let us list the factors of the first seven triangle numbers:
         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.
        What is the value of the first triangle number to have over five hundred divisors?
         */
        long triangle = 3;
        long i = 3;
        int count_d = 500;
        int max_d = 1;
        while (true) {
            triangle += i++;
            int d = CountDivisors(triangle);
            //System.out.println(triangle + " " + divisors);
            if (d > max_d) {
                max_d = d;
                System.out.println(triangle + " " + d);
            }
            if (d > count_d) {
                break;
            }
        }
        System.out.println(triangle);
    }
}
